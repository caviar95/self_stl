为了进一步解耦，可以将状态转换的逻辑完全从 `IState` 中移除，通过回调函数或者事件机制来实现状态转换。以下是优化后的代码：


### 优化说明
1. **引入回调函数**：在 `IState` 接口中定义了一个 `StateChangeCallback` 类型，它是一个 `std::function`，用于在状态处理逻辑中触发状态转换。
2. **状态转换逻辑移至 `Context`**：`Context` 类中的 `changeState` 方法负责根据新的状态名称来切换当前状态。`IState` 的具体实现类只需要调用回调函数并传入新的状态名称，而不需要知道具体的状态转换逻辑。
3. **解耦 `IState` 和 `Context`**：通过这种方式，`IState` 不再直接依赖 `Context`，而是依赖一个通用的回调接口，进一步降低了耦合度，符合依赖倒置原则。

这样，`IState` 接口和具体的状态类更加独立，可复用性和可测试性都得到了提升。同时，`Context` 类负责管理状态的切换，职责更加清晰。 